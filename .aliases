# ~/.dotfiles/.aliases

# If not root (sudo helpers)
if [ $UID -ne 0 ]; then
  alias iftop="sudo iftop"
  alias iotop="sudo iotop"
  alias mount="sudo mount"
  alias umount="sudo umount"
  alias nmap="sudo nmap"
  alias mtr="sudo mtr"
fi

# Enable sudo alias expansion
alias sudo='sudo '

# dotfiles
alias dotfiles-update="git -C ~/.dotfiles pull"
alias dotfiles-install="~/.dotfiles/install"

# Terminal
alias zrc="source ~/.zshrc"
alias brc="source ~/.bashrc"
alias c='clear'
alias home='cd ~/ && clear'
alias h='home'
alias ,='home'
alias ,,='cd ~/ && reset'

# Directory
alias ~='cd ~'
alias -- -='cd -'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias WS='cd ~/WS/'
alias ws='WS'
alias OSS='cd ~/OSS'
alias oss='OSS'
alias o='open .'
alias lsal='ls -al'

# Files
alias bashrc='vim ~/.bashrc'
alias vimrc='vim ~/.vimrc'
alias zshrc='vim ~/.zshrc'
alias cpr='cp -R'
alias find-hard-links='find / -xdev -samefile' #FILE
alias find-hard-link-id='find / -xdev -inum' #INODE_ID

# Text
alias chomp="awk 1 ORS=''"

# Grep
alias grep='grep --color=auto'
alias grep-not='grep --color=auto -L'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias igrep='grep --ignore-case'
alias rgrep='grep --recursive'
alias grepi='grep --ignore-case'
alias lsgrep='ls -al | grep --color=auto'
alias catg='fgrep'

# Git
alias g='git'
alias gl='git l'
alias d='git diff'
alias s='git status'
alias gm='git checkout master'
alias gco='git checkout'
alias a='git add'
alias ga='git add'
alias gaa='git add --all'
alias gap='git add --patch'
alias gat='git add --update'
alias gcm='git commit --message'
alias gcan='git commit --amend --no-edit'
alias gfu='git commit --amend --no-edit'
alias gdc='git diff --cached'
alias gaacm='git add --all && git commit --message'
alias git-rollback-hard='git reset HEAD~' # flush staged
alias git-rollback-soft='git reset --soft HEAD~1' # keep staged
alias grls='git remote --verbose'

ossgc() {
  url=$1
  project=`echo $url | awk -F/ '{print $(NF-0)}'`
  projectpath="$HOME/OSS/$project"
  mkdir -p "$HOME/OSS"
  git clone "$url" "$projectpath"
  cd $projectpath
}

# Docker
alias drm="docker rm"
alias dps="docker ps"

function datt () {
    docker start $1 && docker attach $1
}

# Helpers
alias one-per-line="sed 's/\s/\n/g'"

# Ruby
alias gu='gem update'

# User
killuser () {
  user=$1
  pgrep -u $user
  ps -fp $(pgrep -u $user)
  killall -KILL -u $user
}

# SSH
ssh-fingerprint () {
  if [ -z "$1" ]; then
    ssh-keygen -l -f ~/.ssh/id_rsa.pub
  else
    ssh-keygen -l -f $1
  fi
}

# Mount
alias mountc='mount | column -t'

# Vim
alias v='vim'
alias vi='vim'
alias svim='sudo vim'

# Local tunnel (without tty)
alias ssh-bg='ssh -nNTf'                # Start SSH session in the background (without tty)
alias ssh-local-tunnel='ssh -nNTf -o ControlPath=none -L'   # 9000:hostB:80 user@host
alias ssh-remote-tunnel='ssh -nNTf -o ControlPath=none -R'  # 9292:localhost:22 user@host
# use ps aux | grep $PORT && kill $PID to close tunnel

# Socks proxy
alias ssh-socks='ssh -D' # 12345 user@host

# Curl
alias curl-no-cache='curl -H "Cache-Control: no-cache"'

# IP
alias ipaddr='dig +short myip.opendns.com @resolver1.opendns.com'
alias ipcalc='ipcalc --nocolor'
alias ip2location='geoiplookup'
alias ip2country="geoiplookup $1 | head -1 | awk '{print \$5}'"

ipinfo() {
  IP=${1:=`ipaddr | chomp`}
  curl "https://dazzlepod.com/ip/${IP}.json"
}

ipinfo2() {
  IP=${1:=`ipaddr | chomp`}
  curl "http://ipinfo.io/${IP}"
}

# Port
alias portscan='sudo nmap -sS -A -v' # portscan HOST

# HTTP
remote-length() { # remote-length URL
  curl -sI "$1" | awk '/Content-Length/ { print $2 }'
}

# File
tab2space() { # tab2space FILE
  file=$1
  expand -4 $file > $file
}
rmln() { # rmln FILE LINE
  sed -i -e "$2d" $1
}

# Audio
aud2m4r() { # aud2m4r INPUT OUTPUT
  filename=$(basename "$1")
  extension="${filename##*.}"
  filename="${filename%.*}"
  output="$filename.m4r"
  afconvert -f m4af "$1" "$output"
}

# Video
vid2ipad() { # vid2ipad INPUT
  filename=$(basename "$1")
  extension="${filename##*.}"
  filename="${filename%.*}"
  output="$filename.mp3.$extension"
  ffmpeg -i "$1" -vcodec copy -acodec mp3 "$output"
}

# Youtube
alias yt='youtube-dl'
alias youtube2mp3='youtube-dl --extract-audio --audio-format mp3'

# Password gen
alias genpass='xxd -l 20 -c 20 -p /dev/urandom'

# Speedtest
alias speedtest='speedtest_cli'

# DNS
alias eh="sudo $EDITOR /etc/hosts"
alias digs='dig +short'

test-dns() {
  if ! which dig; then
    echo 'Please install dig package'
    return
  fi
  echo -n 'google.com '
  dig +short google.com | head -n1
  echo -n 'facebook.com '
  dig +short facebook.com | head -n1
  echo -n 'reddit.com '
  dig +short reddit.com | head -n1
}

reverse-dns() {
  dig -x $1 +short
}

# DNS Crypt
test-dnscrypt() {
  if ! which dig; then
    echo 'Please install dig'
    exit -1
  fi
  echo 'google.com'
  dig @127.0.0.1 +short google.com | head -n1
  echo 'facebook.com'
  dig @127.0.0.1 +short facebook.com | head -n1
  echo 'reddit.com'
  echo \t\ne && dig @127.0.0.1 +short reddit.com | head -n1
}

# MAC Address
genmac() {
  printf '%02X:%02X:%02X:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256] $[RANDOM%256] $[RANDOM%256] $[RANDOM%256]
}
genmac-apple() {
  printf '00:0A:95:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256]
}

# Connectivity
detect-captive-portal() {
  http_status=`curl -Isw '%{http_code}' -o /dev/null http://clients3.google.com/generate_204`
  exit_code=$?
  echo $http_status
  echo $?

  if [ $http_status -eq "204" ]; then
    echo "No captive portal"
  elif [ $exit_code -eq "52" ]; then
    echo 'Captive portal detected'
  else
   echo 'Check network connection'
  fi

  ## http://www.apple.com/library/test/success.html
}

test-net() {
  http_status_google=`curl -Isw '%{http_code}' -o /dev/null http://clients3.google.com/generate_204 2> /dev/null`
  status_code_google=$?
  http_status_apple=`curl -Isw '%{http_code}' -o /dev/null http://www.apple.com/library/test/success.html 2> /dev/null`
  status_code_apple=$?

  if [[ $status_code_google -eq "0" && $http_status_google -eq "204" ]]; then
    echo 'Google OK!'
  else
    echo "Google Error :( - $status_code_google"
  fi

  if [[ $status_code_apple -eq "0" && $http_status_apple -eq "200" ]]; then
    echo 'Apple OK!'
  else
    echo "Apple Error :( - $status_code_apple"
  fi
}

# Port knocking (use /usr/bin/knock instead)
function knock {
 HOST=$1
 shift
 for ARG in "$@"
 do
   nmap -Pn --host_timeout 100 --max-retries 0 -p $ARG $HOST
 done
}

# Find file by name
hlocate() {
  find $HOME -name "$1"
}
rlocate() {
  sudo find / -name "$1"
}

# Find text in files
#grep "$QUERY" $PATH
#grep -R "$QUERY" $PATH (recursive)


# arp
alias arp-local='arp -an'

# ps
alias psc='ps xawf -eo pid,user,cgroup,args' # ps with cgroups
function psgrep { # with hack to colorise
  ps aux | grep $1 | grep -v grep | grep --color=auto $1
}

# DS_Store
alias rm-ds-store="find . -name '*.DS_Store' -type f -delete"

# Date
alias date2='date +%Y-%m-%d'
alias date3='date +%Y-%m-%d.%H:%M:%S'

# Netstat (port scan)
alias lsport='sudo netstat -nlp'

# Vim
alias vim-plugin-install='vim +PluginInstall +qall'

# Ding
alias ding='tput bel'
alias ding2='/usr/bin/printf "\a"'
alias ding3='echo -e "\a"'

# Gpg
alias gpg-detached-sig='gpg --armor --detach-sign' # FILE

# Dictionary
function define {
  curl dict://dict.org/d:$1
}

# Find zsh alias
function zsh-find-alias {
  grep -rnwi "$HOME/.dotfiles" -e "alias $1"
  # nano +4 FILENAME - to open nano at line
}

# Colorise cat (require python-pygmentize)
alias dog='pygmentize -g'

# Man (add colour)
# http://boredzo.org/blog/archives/2016-08-15/colorized-man-pages-understood-and-customized
man() {
  env \
  LESS_TERMCAP_mb=$(printf "\e[1;31m") \
  LESS_TERMCAP_md=$(printf "\e[1;31m") \
  LESS_TERMCAP_me=$(printf "\e[0m") \
  LESS_TERMCAP_se=$(printf "\e[0m") \
  LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
  LESS_TERMCAP_ue=$(printf "\e[0m") \
  LESS_TERMCAP_us=$(printf "\e[1;32m") \
  command man "$@"
}

qman() {
  qman_path="$HOME/.qman"
  qman=$1
  if [[ -f  "$qman_path/$qman" ]]; then
    less "$qman_path/$qman"
  fi
}

# Media
alias timelapse-jpg2mp4='cat *.jpg | ffmpeg -f image2pipe -r 25 -vcodec mjpeg -i - -vcodec libx264 out2.mp4'

# Python server
alias python-simple-http-server='python -m SimpleHTTPServer 8000'
